{"version":3,"file":"three-js-capsule-geometry.js","sources":["../src/CapsuleBufferGeometry.js","../src/exports.js"],"sourcesContent":["const THREE = require(\"three\");\r\n\r\n/**\r\n * @author maximequiblier\r\n */\r\nfunction CapsuleBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, capsTopSegments, capsBottomSegments, thetaStart, thetaLength ) {\r\n\r\n    THREE.BufferGeometry.call( this );\r\n\r\n    this.type = 'CapsuleBufferGeometry';\r\n\r\n    this.parameters = {\r\n        radiusTop: radiusTop,\r\n        radiusBottom: radiusBottom,\r\n        height: height,\r\n        radialSegments: radialSegments,\r\n        heightSegments: heightSegments,\r\n        thetaStart: thetaStart,\r\n        thetaLength: thetaLength\r\n    };\r\n\r\n    var scope = this;\r\n\r\n    radiusTop = radiusTop !== undefined ? radiusTop : 1;\r\n    radiusBottom = radiusBottom !== undefined ? radiusBottom : 1;\r\n    height = height !== undefined ? height : 2;\r\n\r\n    radialSegments = Math.floor( radialSegments ) || 8;\r\n    heightSegments = Math.floor( heightSegments ) || 1;\r\n    capsTopSegments = Math.floor( capsTopSegments ) || 2;\r\n    capsBottomSegments = Math.floor( capsBottomSegments ) || 2;\r\n\r\n    thetaStart = thetaStart !== undefined ? thetaStart : 0.0;\r\n    thetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;\r\n\r\n    // Alpha is the angle such that Math.PI/2 - alpha is the cone part angle.\r\n    var alpha = Math.acos((radiusBottom-radiusTop)/height);\r\n    var eqRadii = (radiusTop-radiusBottom === 0);\r\n\r\n    var vertexCount = calculateVertexCount();\r\n    var indexCount = calculateIndexCount();\r\n\r\n    // buffers\r\n    var indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ), 1 );\r\n    var vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n    var normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n    var uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\r\n\r\n    // helper variables\r\n\r\n    var index = 0,\r\n        indexOffset = 0,\r\n        indexArray = [],\r\n        halfHeight = height / 2;\r\n\r\n    // generate geometry\r\n\r\n    generateTorso();\r\n\r\n    // build geometry\r\n\r\n    this.setIndex( indices );\r\n    this.setAttribute( 'position', vertices );\r\n    this.setAttribute( 'normal', normals );\r\n    this.setAttribute( 'uv', uvs );\r\n\r\n    // helper functions\r\n\r\n    function calculateVertexCount(){\r\n        var count = ( radialSegments + 1 ) * ( heightSegments + 1 + capsBottomSegments + capsTopSegments);\r\n        return count;\r\n    }\r\n\r\n    function calculateIndexCount() {\r\n        var count = radialSegments * (heightSegments + capsBottomSegments + capsTopSegments) * 2 * 3;\r\n        return count;\r\n    }\r\n\r\n    function generateTorso() {\r\n\r\n        var x, y;\r\n        var normal = new THREE.Vector3();\r\n        var vertex = new THREE.Vector3();\r\n\r\n        var cosAlpha = Math.cos(alpha);\r\n        var sinAlpha = Math.sin(alpha);\r\n\r\n        var cone_length =\r\n            new THREE.Vector2(\r\n                radiusTop*sinAlpha,\r\n                halfHeight+radiusTop*cosAlpha\r\n                ).sub(new THREE.Vector2(\r\n                    radiusBottom*sinAlpha,\r\n                    -halfHeight+radiusBottom*cosAlpha\r\n                )\r\n            ).length();\r\n\r\n        // Total length for v texture coord\r\n        var vl = radiusTop*alpha\r\n                 + cone_length\r\n                 + radiusBottom*(Math.PI/2-alpha);\r\n\r\n        var groupCount = 0;\r\n\r\n        // generate vertices, normals and uvs\r\n\r\n        var v = 0;\r\n        for( y = 0; y <= capsTopSegments; y++ ) {\r\n\r\n            var indexRow = [];\r\n\r\n            var a = Math.PI/2 - alpha*(y / capsTopSegments);\r\n\r\n            v += radiusTop*alpha/capsTopSegments;\r\n\r\n            var cosA = Math.cos(a);\r\n            var sinA = Math.sin(a);\r\n\r\n            // calculate the radius of the current row\r\n            var radius = cosA*radiusTop;\r\n\r\n            for ( x = 0; x <= radialSegments; x ++ ) {\r\n\r\n                var u = x / radialSegments;\r\n\r\n                var theta = u * thetaLength + thetaStart;\r\n\r\n                var sinTheta = Math.sin( theta );\r\n                var cosTheta = Math.cos( theta );\r\n\r\n                // vertex\r\n                vertex.x = radius * sinTheta;\r\n                vertex.y = halfHeight + sinA*radiusTop;\r\n                vertex.z = radius * cosTheta;\r\n                vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\r\n\r\n                // normal\r\n                normal.set( cosA*sinTheta, sinA, cosA*cosTheta );\r\n                normals.setXYZ( index, normal.x, normal.y, normal.z );\r\n\r\n                // uv\r\n                uvs.setXY( index, u, 1 - v/vl );\r\n\r\n                // save index of vertex in respective row\r\n                indexRow.push( index );\r\n\r\n                // increase index\r\n                index ++;\r\n\r\n            }\r\n\r\n            // now save vertices of the row in our index array\r\n            indexArray.push( indexRow );\r\n\r\n        }\r\n\r\n        var cone_height = height + cosAlpha*radiusTop - cosAlpha*radiusBottom;\r\n        var slope = sinAlpha * ( radiusBottom - radiusTop ) / cone_height;\r\n        for ( y = 1; y <= heightSegments; y++ ) {\r\n\r\n            var indexRow = [];\r\n\r\n            v += cone_length/heightSegments;\r\n\r\n            // calculate the radius of the current row\r\n            var radius = sinAlpha * ( y * ( radiusBottom - radiusTop ) / heightSegments + radiusTop);\r\n\r\n            for ( x = 0; x <= radialSegments; x ++ ) {\r\n\r\n                var u = x / radialSegments;\r\n\r\n                var theta = u * thetaLength + thetaStart;\r\n\r\n                var sinTheta = Math.sin( theta );\r\n                var cosTheta = Math.cos( theta );\r\n\r\n                // vertex\r\n                vertex.x = radius * sinTheta;\r\n                vertex.y = halfHeight + cosAlpha*radiusTop - y * cone_height / heightSegments;\r\n                vertex.z = radius * cosTheta;\r\n                vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\r\n\r\n                // normal\r\n                normal.set( sinTheta, slope, cosTheta ).normalize();\r\n                normals.setXYZ( index, normal.x, normal.y, normal.z );\r\n\r\n                // uv\r\n                uvs.setXY( index, u, 1 - v/vl );\r\n\r\n                // save index of vertex in respective row\r\n                indexRow.push( index );\r\n\r\n                // increase index\r\n                index ++;\r\n\r\n            }\r\n\r\n            // now save vertices of the row in our index array\r\n            indexArray.push( indexRow );\r\n\r\n        }\r\n\r\n        for( y = 1; y <= capsBottomSegments; y++ ) {\r\n\r\n            var indexRow = [];\r\n\r\n            var a = (Math.PI/2 - alpha) - (Math.PI - alpha)*( y / capsBottomSegments);\r\n\r\n            v += radiusBottom*alpha/capsBottomSegments;\r\n\r\n            var cosA = Math.cos(a);\r\n            var sinA = Math.sin(a);\r\n\r\n            // calculate the radius of the current row\r\n            var radius = cosA*radiusBottom;\r\n\r\n            for ( x = 0; x <= radialSegments; x ++ ) {\r\n\r\n                var u = x / radialSegments;\r\n\r\n                var theta = u * thetaLength + thetaStart;\r\n\r\n                var sinTheta = Math.sin( theta );\r\n                var cosTheta = Math.cos( theta );\r\n\r\n                // vertex\r\n                vertex.x = radius * sinTheta;\r\n                vertex.y = -halfHeight + sinA*radiusBottom;;\r\n                vertex.z = radius * cosTheta;\r\n                vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\r\n\r\n                // normal\r\n                normal.set( cosA*sinTheta, sinA, cosA*cosTheta );\r\n                normals.setXYZ( index, normal.x, normal.y, normal.z );\r\n\r\n                // uv\r\n                uvs.setXY( index, u, 1 - v/vl );\r\n\r\n                // save index of vertex in respective row\r\n                indexRow.push( index );\r\n\r\n                // increase index\r\n                index ++;\r\n\r\n            }\r\n\r\n            // now save vertices of the row in our index array\r\n            indexArray.push( indexRow );\r\n\r\n        }\r\n\r\n        // generate indices\r\n\r\n        for ( x = 0; x < radialSegments; x ++ ) {\r\n\r\n            for ( y = 0; y < capsTopSegments + heightSegments + capsBottomSegments; y ++ ) {\r\n\r\n                // we use the index array to access the correct indices\r\n                var i1 = indexArray[ y ][ x ];\r\n                var i2 = indexArray[ y + 1 ][ x ];\r\n                var i3 = indexArray[ y + 1 ][ x + 1 ];\r\n                var i4 = indexArray[ y ][ x + 1 ];\r\n\r\n                // face one\r\n                indices.setX( indexOffset, i1 ); indexOffset ++;\r\n                indices.setX( indexOffset, i2 ); indexOffset ++;\r\n                indices.setX( indexOffset, i4 ); indexOffset ++;\r\n\r\n                // face two\r\n                indices.setX( indexOffset, i2 ); indexOffset ++;\r\n                indices.setX( indexOffset, i3 ); indexOffset ++;\r\n                indices.setX( indexOffset, i4 ); indexOffset ++;\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nCapsuleBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nCapsuleBufferGeometry.prototype.constructor = CapsuleBufferGeometry;\r\n\r\nCapsuleBufferGeometry.fromPoints = function(pointA, pointB, radiusA, radiusB, radialSegments, heightSegments, capsTopSegments, capsBottomSegments, thetaStart, thetaLength ) {\r\n\r\n    let cmin = null;\r\n    let cmax = null;\r\n    let rmin = null;\r\n    let rmax = null;\r\n\r\n    if(radiusA > radiusB){\r\n        cmax = pointA;\r\n        cmin = pointB;\r\n        rmax = radiusA;\r\n        rmin = radiusB;\r\n    }else{\r\n        cmax = pointA;\r\n        cmin = pointB;\r\n        rmax = radiusA;\r\n        rmin = radiusB;\r\n    }\r\n\r\n    const c0 = cmin;\r\n    const c1 = cmax;\r\n    const r0 = rmin;\r\n    const r1 = rmax;\r\n\r\n    const sphereCenterTop = new THREE.Vector3( c0.x, c0.y, c0.z );\r\n    const sphereCenterBottom = new THREE.Vector3( c1.x, c1.y, c1.z );\r\n\r\n    const radiusTop = r0;\r\n    const radiusBottom = r1;\r\n    let height = sphereCenterTop.distanceTo( sphereCenterBottom );\r\n\r\n    // If the big sphere contains the small one, return a SphereBufferGeometry\r\n    if(height < Math.abs( r0 - r1 )){\r\n        let g = new THREE.SphereBufferGeometry(r1, radialSegments, capsBottomSegments, thetaStart, thetaLength);\r\n\r\n        g.translate(r1.x, r1.y, r1.z);\r\n        return g;\r\n    }\r\n\r\n    // useful values\r\n    const alpha = Math.acos( ( radiusBottom - radiusTop ) / height );\r\n    const cosAlpha = Math.cos( alpha );\r\n    const sinAlpha = Math.sin( alpha );\r\n\r\n    // compute cylinder properties\r\n    const coneHeight = height + cosAlpha * radiusTop - cosAlpha * radiusBottom;\r\n    const cylTopRadius = sinAlpha * radiusTop;\r\n    const cylBottomRadius = sinAlpha * radiusBottom;\r\n\r\n    // compute rotation matrix\r\n    const rotationMatrix = new THREE.Matrix4();\r\n    const quaternion = new THREE.Quaternion();\r\n    const capsuleModelUnitVector = new THREE.Vector3( 0, 1, 0 );\r\n    const capsuleUnitVector = new THREE.Vector3();\r\n    capsuleUnitVector.subVectors( sphereCenterTop, sphereCenterBottom );\r\n    capsuleUnitVector.normalize();\r\n    quaternion.setFromUnitVectors( capsuleModelUnitVector, capsuleUnitVector );\r\n    rotationMatrix.makeRotationFromQuaternion( quaternion );\r\n\r\n    // compute translation matrix from center point\r\n    const translationMatrix = new THREE.Matrix4();\r\n    const cylVec = new THREE.Vector3();\r\n    cylVec.subVectors( sphereCenterTop, sphereCenterBottom );\r\n    cylVec.normalize();\r\n    let cylTopPoint = new THREE.Vector3();\r\n    cylTopPoint = sphereCenterTop;\r\n    cylTopPoint.addScaledVector( cylVec, cosAlpha * radiusTop );\r\n    let cylBottomPoint = new THREE.Vector3();\r\n    cylBottomPoint = sphereCenterBottom;\r\n    cylBottomPoint.addScaledVector( cylVec, cosAlpha * radiusBottom );\r\n\r\n    // computing lerp for color\r\n    const dir = new THREE.Vector3();\r\n    dir.subVectors( cylBottomPoint, cylTopPoint );\r\n    dir.normalize();\r\n\r\n    const middlePoint = new THREE.Vector3();\r\n    middlePoint.lerpVectors( cylBottomPoint, cylTopPoint, 0.5 );\r\n    translationMatrix.makeTranslation( middlePoint.x, middlePoint.y, middlePoint.z );\r\n\r\n    // Instanciate a CylinderBufferGeometry from three.js\r\n    let g = new CapsuleBufferGeometry(radiusBottom, radiusTop, height, radialSegments, heightSegments, capsTopSegments, capsBottomSegments, thetaStart, thetaLength);\r\n\r\n    // applying transformations\r\n    g.applyMatrix( rotationMatrix );\r\n    g.applyMatrix( translationMatrix );\r\n\r\n    return g;\r\n};\r\n\r\nmodule.exports = CapsuleBufferGeometry;","var THREECapsuleBufferGeometry = require(\"./CapsuleBufferGeometry\");\n\nTHREE.CapsuleBufferGeometry = THREECapsuleBufferGeometry;\n\nmodule.exports = THREECapsuleBufferGeometry;\n"],"names":["THREE","THREECapsuleBufferGeometry","exports"],"mappings":"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"}